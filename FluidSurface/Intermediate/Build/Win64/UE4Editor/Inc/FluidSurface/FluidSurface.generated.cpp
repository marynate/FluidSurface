// Copyright 1998-2015 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/FluidSurfacePrivatePCH.h"
#include "FluidSurface.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCodeFluidSurface() {}
	void AFluidSurfaceActor::StaticRegisterNativesAFluidSurfaceActor()
	{
	}
	IMPLEMENT_CLASS(AFluidSurfaceActor, 101342530);
static class UEnum* EFluidGridType_StaticEnum()
{
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern FLUIDSURFACE_API class UEnum* Z_Construct_UEnum_FluidSurface_EFluidGridType();
		extern FLUIDSURFACE_API class UPackage* Z_Construct_UPackage_FluidSurface();
		Singleton = GetStaticEnum(Z_Construct_UEnum_FluidSurface_EFluidGridType, Z_Construct_UPackage_FluidSurface(), TEXT("EFluidGridType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EFluidGridType(EFluidGridType_StaticEnum, TEXT("/Script/FluidSurface"));
class UScriptStruct* FRangedValues::StaticStruct()
{
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern FLUIDSURFACE_API class UScriptStruct* Z_Construct_UScriptStruct_FRangedValues();
		extern FLUIDSURFACE_API uint32 Get_Z_Construct_UScriptStruct_FRangedValues_CRC();
		extern FLUIDSURFACE_API class UPackage* Z_Construct_UPackage_FluidSurface();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FRangedValues, Z_Construct_UPackage_FluidSurface(), TEXT("RangedValues"), sizeof(FRangedValues), Get_Z_Construct_UScriptStruct_FRangedValues_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FRangedValues(FRangedValues::StaticStruct, TEXT("/Script/FluidSurface"));
static struct FScriptStruct_FluidSurface_StaticRegisterNativesFRangedValues
{
	FScriptStruct_FluidSurface_StaticRegisterNativesFRangedValues()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("RangedValues")),new UScriptStruct::TCppStructOps<FRangedValues>);
	}
} ScriptStruct_FluidSurface_StaticRegisterNativesFRangedValues;
	void UFluidSurfaceComponent::StaticRegisterNativesUFluidSurfaceComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UFluidSurfaceComponent::StaticClass(),"ComponentTouched",(Native)&UFluidSurfaceComponent::execComponentTouched);
		FNativeFunctionRegistrar::RegisterFunction(UFluidSurfaceComponent::StaticClass(),"Pling",(Native)&UFluidSurfaceComponent::execPling);
	}
	IMPLEMENT_CLASS(UFluidSurfaceComponent, 3796649521);
	void AFluidSurfaceModifier::StaticRegisterNativesAFluidSurfaceModifier()
	{
	}
	IMPLEMENT_CLASS(AFluidSurfaceModifier, 2982996796);
	void AFluidSurfaceOscillator::StaticRegisterNativesAFluidSurfaceOscillator()
	{
	}
	IMPLEMENT_CLASS(AFluidSurfaceOscillator, 44556301);
	void AFluidSurfaceRain::StaticRegisterNativesAFluidSurfaceRain()
	{
	}
	IMPLEMENT_CLASS(AFluidSurfaceRain, 4191475575);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UMeshComponent();
	ENGINE_API class UClass* Z_Construct_UClass_UMaterialInterface_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBodySetup_NoRegister();
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FColor();
	ENGINE_API class UClass* Z_Construct_UClass_UParticleSystem_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UBillboardComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();

	FLUIDSURFACE_API class UClass* Z_Construct_UClass_AFluidSurfaceActor_NoRegister();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_AFluidSurfaceActor();
	FLUIDSURFACE_API class UEnum* Z_Construct_UEnum_FluidSurface_EFluidGridType();
	FLUIDSURFACE_API class UScriptStruct* Z_Construct_UScriptStruct_FRangedValues();
	FLUIDSURFACE_API class UFunction* Z_Construct_UFunction_UFluidSurfaceComponent_ComponentTouched();
	FLUIDSURFACE_API class UFunction* Z_Construct_UFunction_UFluidSurfaceComponent_Pling();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_UFluidSurfaceComponent_NoRegister();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_UFluidSurfaceComponent();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_AFluidSurfaceModifier_NoRegister();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_AFluidSurfaceModifier();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_AFluidSurfaceOscillator_NoRegister();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_AFluidSurfaceOscillator();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_AFluidSurfaceRain_NoRegister();
	FLUIDSURFACE_API class UClass* Z_Construct_UClass_AFluidSurfaceRain();
	FLUIDSURFACE_API class UPackage* Z_Construct_UPackage_FluidSurface();
	UClass* Z_Construct_UClass_AFluidSurfaceActor_NoRegister()
	{
		return AFluidSurfaceActor::StaticClass();
	}
	UClass* Z_Construct_UClass_AFluidSurfaceActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_FluidSurface();
			OuterClass = AFluidSurfaceActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FluidSurfaceComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidSurfaceComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FluidSurfaceComponent, AFluidSurfaceActor), 0x00000000000a001d, Z_Construct_UClass_UFluidSurfaceComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Replication Physics"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FluidSurfaceActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceActor.h"));
				MetaData->SetValue(NewProp_FluidSurfaceComponent, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidSurfaceComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_FluidSurfaceComponent, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceActor.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFluidSurfaceActor(Z_Construct_UClass_AFluidSurfaceActor, TEXT("AFluidSurfaceActor"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFluidSurfaceActor);
	UEnum* Z_Construct_UEnum_FluidSurface_EFluidGridType()
	{
		UPackage* Outer=Z_Construct_UPackage_FluidSurface();
		static UEnum* ReturnEnum = NULL;
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EFluidGridType"), RF_Public|RF_Transient|RF_Native) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFluidGridType::FGT_Square")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFluidGridType::FGT_Hexagonal")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EFluidGridType::FGT_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
#endif
		}
		return ReturnEnum;
	}
	UScriptStruct* Z_Construct_UScriptStruct_FRangedValues()
	{
		UPackage* Outer=Z_Construct_UPackage_FluidSurface();
		static UScriptStruct* ReturnStruct = NULL;
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RangedValues"), RF_Public|RF_Transient|RF_Native) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FRangedValues>, EStructFlags(0x00000001));
			UProperty* NewProp_MaxValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MaxValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MaxValue, FRangedValues), 0x0000000000000005);
			UProperty* NewProp_MinValue = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("MinValue"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(MinValue, FRangedValues), 0x0000000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Stores a range of values"));
			MetaData->SetValue(NewProp_MaxValue, TEXT("Category"), TEXT("Range"));
			MetaData->SetValue(NewProp_MaxValue, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
			MetaData->SetValue(NewProp_MaxValue, TEXT("ToolTip"), TEXT("Maximum value of range"));
			MetaData->SetValue(NewProp_MinValue, TEXT("Category"), TEXT("Range"));
			MetaData->SetValue(NewProp_MinValue, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
			MetaData->SetValue(NewProp_MinValue, TEXT("ToolTip"), TEXT("Minimum value of range"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FRangedValues_CRC() { return 2691090111U; }
	UFunction* Z_Construct_UFunction_UFluidSurfaceComponent_ComponentTouched()
	{
		struct FluidSurfaceComponent_eventComponentTouched_Parms
		{
			AActor* Other;
			UPrimitiveComponent* OtherComp;
			int32 OtherBodyIndex;
			bool bFromSweep;
			FHitResult SweepResult;
		};
		UObject* Outer=Z_Construct_UClass_UFluidSurfaceComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ComponentTouched"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x00420401, 65535, sizeof(FluidSurfaceComponent_eventComponentTouched_Parms));
			UProperty* NewProp_SweepResult = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("SweepResult"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(SweepResult, FluidSurfaceComponent_eventComponentTouched_Parms), 0x0000008008000182, Z_Construct_UScriptStruct_FHitResult());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bFromSweep, FluidSurfaceComponent_eventComponentTouched_Parms, bool);
			UProperty* NewProp_bFromSweep = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bFromSweep"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bFromSweep, FluidSurfaceComponent_eventComponentTouched_Parms), 0x0000000000000080, CPP_BOOL_PROPERTY_BITMASK(bFromSweep, FluidSurfaceComponent_eventComponentTouched_Parms), sizeof(bool), true);
			UProperty* NewProp_OtherBodyIndex = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherBodyIndex"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(OtherBodyIndex, FluidSurfaceComponent_eventComponentTouched_Parms), 0x0000000000000080);
			UProperty* NewProp_OtherComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, FluidSurfaceComponent_eventComponentTouched_Parms), 0x0000000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_Other = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Other"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(Other, FluidSurfaceComponent_eventComponentTouched_Parms), 0x0000000000000080, Z_Construct_UClass_AActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Delegates"));
			MetaData->SetValue(NewProp_OtherComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UFluidSurfaceComponent_Pling()
	{
		struct FluidSurfaceComponent_eventPling_Parms
		{
			FVector Position;
			float Strength;
			float Radius;
		};
		UObject* Outer=Z_Construct_UClass_UFluidSurfaceComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Pling"), RF_Public|RF_Transient|RF_Native) UFunction(FObjectInitializer(), NULL, 0x04C20401, 65535, sizeof(FluidSurfaceComponent_eventPling_Parms));
			UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, FluidSurfaceComponent_eventPling_Parms), 0x0000000000000080);
			UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Strength, FluidSurfaceComponent_eventPling_Parms), 0x0000000000000080);
			UProperty* NewProp_Position = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Position"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Position, FluidSurfaceComponent_eventPling_Parms), 0x0000000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("FluidSurface"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Pling"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UFluidSurfaceComponent_NoRegister()
	{
		return UFluidSurfaceComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UFluidSurfaceComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UMeshComponent();
			Z_Construct_UPackage_FluidSurface();
			OuterClass = UFluidSurfaceComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20A01080;

				OuterClass->LinkChild(Z_Construct_UFunction_UFluidSurfaceComponent_ComponentTouched());
				OuterClass->LinkChild(Z_Construct_UFunction_UFluidSurfaceComponent_Pling());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_FluidMaterial = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidMaterial"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FluidMaterial, UFluidSurfaceComponent), 0x0000000000000001, Z_Construct_UClass_UMaterialInterface_NoRegister());
				UProperty* NewProp_BodySetup = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BodySetup"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(BodySetup, UFluidSurfaceComponent), 0x0000000000202000, Z_Construct_UClass_UBodySetup_NoRegister());
				UProperty* NewProp_Modifiers = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Modifiers"), RF_Public|RF_Transient|RF_Native) UArrayProperty(CPP_PROPERTY_BASE(Modifiers, UFluidSurfaceComponent), 0x0000000000000000);
				UProperty* NewProp_Modifiers_Inner = new(EC_InternalUseOnlyConstructor, NewProp_Modifiers, TEXT("Modifiers"), RF_Public|RF_Transient|RF_Native) UObjectProperty(FObjectInitializer(), EC_CppProperty, 0, 0x0000000000000000, Z_Construct_UClass_AFluidSurfaceModifier_NoRegister());
				UProperty* NewProp_TessellationRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TessellationRatio"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TessellationRatio, UFluidSurfaceComponent), 0x0000000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(BuildTessellationData, UFluidSurfaceComponent, bool);
				UProperty* NewProp_BuildTessellationData = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BuildTessellationData"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(BuildTessellationData, UFluidSurfaceComponent), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(BuildTessellationData, UFluidSurfaceComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(UpdateComponent, UFluidSurfaceComponent, bool);
				UProperty* NewProp_UpdateComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpdateComponent"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(UpdateComponent, UFluidSurfaceComponent), 0x0000000000000001, CPP_BOOL_PROPERTY_BITMASK(UpdateComponent, UFluidSurfaceComponent), sizeof(bool), true);
				UProperty* NewProp_FluidColor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidColor"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FluidColor, UFluidSurfaceComponent), 0x0000000000000000, Z_Construct_UScriptStruct_FColor());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(OrientTouchEffect, UFluidSurfaceComponent, bool);
				UProperty* NewProp_OrientTouchEffect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OrientTouchEffect"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(OrientTouchEffect, UFluidSurfaceComponent), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(OrientTouchEffect, UFluidSurfaceComponent), sizeof(bool), true);
				UProperty* NewProp_TouchEffect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(TouchEffect, UFluidSurfaceComponent), 0x0000000000000005, Z_Construct_UClass_UParticleSystem_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(OrientShootEffect, UFluidSurfaceComponent, bool);
				UProperty* NewProp_OrientShootEffect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OrientShootEffect"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(OrientShootEffect, UFluidSurfaceComponent), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(OrientShootEffect, UFluidSurfaceComponent), sizeof(bool), true);
				UProperty* NewProp_ShootEffect = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShootEffect"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(ShootEffect, UFluidSurfaceComponent), 0x0000000000000005, Z_Construct_UClass_UParticleSystem_NoRegister());
				UProperty* NewProp_RippleVelocityFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RippleVelocityFactor"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(RippleVelocityFactor, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_TouchStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TouchStrength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TouchStrength, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_ShootRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShootRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ShootRadius, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_ShootStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ShootStrength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(ShootStrength, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_TestRippleRadius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestRippleRadius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TestRippleRadius, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_TestRippleStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestRippleStrength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TestRippleStrength, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_TestRippleSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestRippleSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(TestRippleSpeed, UFluidSurfaceComponent), 0x0000000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(TestRipple, UFluidSurfaceComponent, bool);
				UProperty* NewProp_TestRipple = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TestRipple"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(TestRipple, UFluidSurfaceComponent), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(TestRipple, UFluidSurfaceComponent), sizeof(bool), true);
				UProperty* NewProp_FluidNoiseStrength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidNoiseStrength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(FluidNoiseStrength, UFluidSurfaceComponent), 0x0000000000000005, Z_Construct_UScriptStruct_FRangedValues());
				UProperty* NewProp_FluidNoiseFrequency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidNoiseFrequency"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FluidNoiseFrequency, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_FluidDamping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidDamping"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FluidDamping, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_FluidTimeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidTimeScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FluidTimeScale, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_FluidSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidSpeed"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FluidSpeed, UFluidSurfaceComponent), 0x0000000000000005);
				UProperty* NewProp_FluidHeightScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidHeightScale"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FluidHeightScale, UFluidSurfaceComponent), 0x0000000000000015);
				UProperty* NewProp_FluidYSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidYSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FluidYSize, UFluidSurfaceComponent), 0x0000000000000015);
				UProperty* NewProp_FluidXSize = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidXSize"), RF_Public|RF_Transient|RF_Native) UIntProperty(CPP_PROPERTY_BASE(FluidXSize, UFluidSurfaceComponent), 0x0000000000000015);
				UProperty* NewProp_FluidGridSpacing = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidGridSpacing"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(FluidGridSpacing, UFluidSurfaceComponent), 0x0000000000000015);
				UProperty* NewProp_FluidGridType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidGridType"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(FluidGridType, UFluidSurfaceComponent), 0x0000000000000015, Z_Construct_UEnum_FluidSurface_EFluidGridType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UFluidSurfaceComponent_ComponentTouched()); // 2593525094
				OuterClass->AddFunctionToFunctionMap(Z_Construct_UFunction_UFluidSurfaceComponent_Pling()); // 1655299574
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Rendering Common Rendering"));
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Object LOD Physics Activation Components|Activation Mobility Trigger ComponentReplication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FluidSurfaceComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidMaterial, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidMaterial, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_BodySetup, TEXT("ToolTip"), TEXT("Collision"));
				MetaData->SetValue(NewProp_Modifiers, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_Modifiers, TEXT("ToolTip"), TEXT("List of modifiers that apply to this surface"));
				MetaData->SetValue(NewProp_TessellationRatio, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_TessellationRatio, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_TessellationRatio, TEXT("EditCondition"), TEXT("BuildTessellationData"));
				MetaData->SetValue(NewProp_TessellationRatio, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_TessellationRatio, TEXT("ToolTip"), TEXT("The ratio of vertices to use during tessellation"));
				MetaData->SetValue(NewProp_TessellationRatio, TEXT("UIMax"), TEXT("2.0"));
				MetaData->SetValue(NewProp_TessellationRatio, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_BuildTessellationData, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_BuildTessellationData, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_BuildTessellationData, TEXT("ToolTip"), TEXT("Wether or not to build tessellation data"));
				MetaData->SetValue(NewProp_UpdateComponent, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_UpdateComponent, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_UpdateComponent, TEXT("ToolTip"), TEXT("Controls wether or not to tick this component (Editor only)"));
				MetaData->SetValue(NewProp_FluidColor, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidColor, TEXT("ToolTip"), TEXT("Fluid color"));
				MetaData->SetValue(NewProp_OrientTouchEffect, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_OrientTouchEffect, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_OrientTouchEffect, TEXT("ToolTip"), TEXT("Orient touch effect"));
				MetaData->SetValue(NewProp_TouchEffect, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_TouchEffect, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_TouchEffect, TEXT("ToolTip"), TEXT("Effect to spawn when fluid is touched"));
				MetaData->SetValue(NewProp_OrientShootEffect, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_OrientShootEffect, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_OrientShootEffect, TEXT("ToolTip"), TEXT("Orient shoot effect"));
				MetaData->SetValue(NewProp_ShootEffect, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_ShootEffect, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_ShootEffect, TEXT("ToolTip"), TEXT("Effect to spawn when fluid is shot"));
				MetaData->SetValue(NewProp_RippleVelocityFactor, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_RippleVelocityFactor, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_RippleVelocityFactor, TEXT("ToolTip"), TEXT("Ripple velocity factor"));
				MetaData->SetValue(NewProp_TouchStrength, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_TouchStrength, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_TouchStrength, TEXT("ToolTip"), TEXT("Touch strength"));
				MetaData->SetValue(NewProp_ShootRadius, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_ShootRadius, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_ShootRadius, TEXT("ToolTip"), TEXT("Shoot radius"));
				MetaData->SetValue(NewProp_ShootStrength, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_ShootStrength, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_ShootStrength, TEXT("ToolTip"), TEXT("Shoot strength"));
				MetaData->SetValue(NewProp_TestRippleRadius, TEXT("Category"), TEXT("RippleTest"));
				MetaData->SetValue(NewProp_TestRippleRadius, TEXT("EditCondition"), TEXT("TestRipple"));
				MetaData->SetValue(NewProp_TestRippleRadius, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_TestRippleRadius, TEXT("ToolTip"), TEXT("Radius of test ripple"));
				MetaData->SetValue(NewProp_TestRippleStrength, TEXT("Category"), TEXT("RippleTest"));
				MetaData->SetValue(NewProp_TestRippleStrength, TEXT("EditCondition"), TEXT("TestRipple"));
				MetaData->SetValue(NewProp_TestRippleStrength, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_TestRippleStrength, TEXT("ToolTip"), TEXT("Strength of test ripple"));
				MetaData->SetValue(NewProp_TestRippleSpeed, TEXT("Category"), TEXT("RippleTest"));
				MetaData->SetValue(NewProp_TestRippleSpeed, TEXT("EditCondition"), TEXT("TestRipple"));
				MetaData->SetValue(NewProp_TestRippleSpeed, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_TestRippleSpeed, TEXT("ToolTip"), TEXT("Speed of test ripple"));
				MetaData->SetValue(NewProp_TestRipple, TEXT("Category"), TEXT("RippleTest"));
				MetaData->SetValue(NewProp_TestRipple, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_TestRipple, TEXT("ToolTip"), TEXT("Enables ripple testing"));
				MetaData->SetValue(NewProp_FluidNoiseStrength, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidNoiseStrength, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidNoiseStrength, TEXT("ToolTip"), TEXT("Fluid Noise Strength"));
				MetaData->SetValue(NewProp_FluidNoiseFrequency, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidNoiseFrequency, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidNoiseFrequency, TEXT("ToolTip"), TEXT("Fluid Noise Frequency"));
				MetaData->SetValue(NewProp_FluidDamping, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidDamping, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_FluidDamping, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidDamping, TEXT("ToolTip"), TEXT("Fluid damping - Between 0 and 1"));
				MetaData->SetValue(NewProp_FluidDamping, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_FluidDamping, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_FluidTimeScale, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidTimeScale, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidTimeScale, TEXT("ToolTip"), TEXT("Time scale"));
				MetaData->SetValue(NewProp_FluidSpeed, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidSpeed, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidSpeed, TEXT("ToolTip"), TEXT("Wave speed"));
				MetaData->SetValue(NewProp_FluidHeightScale, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidHeightScale, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidHeightScale, TEXT("ToolTip"), TEXT("Vertical scale factor"));
				MetaData->SetValue(NewProp_FluidYSize, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidYSize, TEXT("ClampMin"), TEXT("32"));
				MetaData->SetValue(NewProp_FluidYSize, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidYSize, TEXT("ToolTip"), TEXT("Num vertices in the Y direction"));
				MetaData->SetValue(NewProp_FluidYSize, TEXT("UIMax"), TEXT("4096"));
				MetaData->SetValue(NewProp_FluidYSize, TEXT("UIMin"), TEXT("32"));
				MetaData->SetValue(NewProp_FluidXSize, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidXSize, TEXT("ClampMin"), TEXT("32"));
				MetaData->SetValue(NewProp_FluidXSize, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidXSize, TEXT("ToolTip"), TEXT("Num vertices in the X direction"));
				MetaData->SetValue(NewProp_FluidXSize, TEXT("UIMax"), TEXT("4096"));
				MetaData->SetValue(NewProp_FluidXSize, TEXT("UIMin"), TEXT("32"));
				MetaData->SetValue(NewProp_FluidGridSpacing, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidGridSpacing, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidGridSpacing, TEXT("ToolTip"), TEXT("Distance between grid points"));
				MetaData->SetValue(NewProp_FluidGridType, TEXT("Category"), TEXT("FluidSurface"));
				MetaData->SetValue(NewProp_FluidGridType, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceComponent.h"));
				MetaData->SetValue(NewProp_FluidGridType, TEXT("ToolTip"), TEXT("Grid type"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UFluidSurfaceComponent(Z_Construct_UClass_UFluidSurfaceComponent, TEXT("UFluidSurfaceComponent"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(UFluidSurfaceComponent);
	UClass* Z_Construct_UClass_AFluidSurfaceModifier_NoRegister()
	{
		return AFluidSurfaceModifier::StaticClass();
	}
	UClass* Z_Construct_UClass_AFluidSurfaceModifier()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage_FluidSurface();
			OuterClass = AFluidSurfaceModifier::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800081;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SceneComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SceneComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SceneComponent, AFluidSurfaceModifier), 0x0000000000080008, Z_Construct_UClass_USceneComponent_NoRegister());
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_SpriteComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpriteComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(SpriteComponent, AFluidSurfaceModifier), 0x0000000800080008, Z_Construct_UClass_UBillboardComponent_NoRegister());
#endif // WITH_EDITORONLY_DATA
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(Active, AFluidSurfaceModifier, bool);
				UProperty* NewProp_Active = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Active"), RF_Public|RF_Transient|RF_Native) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(Active, AFluidSurfaceModifier), 0x0000000000000005, CPP_BOOL_PROPERTY_BITMASK(Active, AFluidSurfaceModifier), sizeof(bool), true);
				UProperty* NewProp_FluidActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FluidActor"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(FluidActor, AFluidSurfaceModifier), 0x0000000000000015, Z_Construct_UClass_AFluidSurfaceActor_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Collision Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FluidSurfaceModifier.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceModifier.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Base class for Fluid Surface modifiers"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceModifier.h"));
				MetaData->SetValue(NewProp_SceneComponent, TEXT("ToolTip"), TEXT("Blank scene component"));
				MetaData->SetValue(NewProp_SpriteComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SpriteComponent, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceModifier.h"));
				MetaData->SetValue(NewProp_SpriteComponent, TEXT("ToolTip"), TEXT("Reference to the billboard component"));
				MetaData->SetValue(NewProp_Active, TEXT("Category"), TEXT("FluidModifier"));
				MetaData->SetValue(NewProp_Active, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceModifier.h"));
				MetaData->SetValue(NewProp_Active, TEXT("ToolTip"), TEXT("Wether or not the modifier is active"));
				MetaData->SetValue(NewProp_FluidActor, TEXT("Category"), TEXT("FluidModifier"));
				MetaData->SetValue(NewProp_FluidActor, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceModifier.h"));
				MetaData->SetValue(NewProp_FluidActor, TEXT("ToolTip"), TEXT("Fluid Surface to modify"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFluidSurfaceModifier(Z_Construct_UClass_AFluidSurfaceModifier, TEXT("AFluidSurfaceModifier"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFluidSurfaceModifier);
	UClass* Z_Construct_UClass_AFluidSurfaceOscillator_NoRegister()
	{
		return AFluidSurfaceOscillator::StaticClass();
	}
	UClass* Z_Construct_UClass_AFluidSurfaceOscillator()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AFluidSurfaceModifier();
			Z_Construct_UPackage_FluidSurface();
			OuterClass = AFluidSurfaceOscillator::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
#if WITH_EDITORONLY_DATA
				UProperty* NewProp_RadiusComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RadiusComponent"), RF_Public|RF_Transient|RF_Native) UObjectProperty(CPP_PROPERTY_BASE(RadiusComponent, AFluidSurfaceOscillator), 0x0000000800080008, Z_Construct_UClass_USphereComponent_NoRegister());
#endif // WITH_EDITORONLY_DATA
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Radius, AFluidSurfaceOscillator), 0x0000000000000005);
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Strength, AFluidSurfaceOscillator), 0x0000000000000005);
				UProperty* NewProp_Phase = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Phase"), RF_Public|RF_Transient|RF_Native) UByteProperty(CPP_PROPERTY_BASE(Phase, AFluidSurfaceOscillator), 0x0000000000000005);
				UProperty* NewProp_Frequency = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Frequency"), RF_Public|RF_Transient|RF_Native) UFloatProperty(CPP_PROPERTY_BASE(Frequency, AFluidSurfaceOscillator), 0x0000000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Collision Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FluidSurfaceOscillator.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceOscillator.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Fluid Surface modifier extension to perform oscillation"));
				MetaData->SetValue(NewProp_RadiusComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RadiusComponent, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceOscillator.h"));
				MetaData->SetValue(NewProp_RadiusComponent, TEXT("ToolTip"), TEXT("Reference to the sphere component for radius"));
				MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("FluidOscillator"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceOscillator.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("Radius of the oscillation"));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("FluidOscillator"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceOscillator.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("Strength of the oscillation"));
				MetaData->SetValue(NewProp_Phase, TEXT("Category"), TEXT("FluidOscillator"));
				MetaData->SetValue(NewProp_Phase, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceOscillator.h"));
				MetaData->SetValue(NewProp_Phase, TEXT("ToolTip"), TEXT("Phase"));
				MetaData->SetValue(NewProp_Frequency, TEXT("Category"), TEXT("FluidOscillator"));
				MetaData->SetValue(NewProp_Frequency, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceOscillator.h"));
				MetaData->SetValue(NewProp_Frequency, TEXT("ToolTip"), TEXT("Frequency of oscillation"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFluidSurfaceOscillator(Z_Construct_UClass_AFluidSurfaceOscillator, TEXT("AFluidSurfaceOscillator"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFluidSurfaceOscillator);
	UClass* Z_Construct_UClass_AFluidSurfaceRain_NoRegister()
	{
		return AFluidSurfaceRain::StaticClass();
	}
	UClass* Z_Construct_UClass_AFluidSurfaceRain()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AFluidSurfaceModifier();
			Z_Construct_UPackage_FluidSurface();
			OuterClass = AFluidSurfaceRain::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20800080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Radius = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Radius"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Radius, AFluidSurfaceRain), 0x0000000000000005, Z_Construct_UScriptStruct_FRangedValues());
				UProperty* NewProp_Strength = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Strength"), RF_Public|RF_Transient|RF_Native) UStructProperty(CPP_PROPERTY_BASE(Strength, AFluidSurfaceRain), 0x0000000000000005, Z_Construct_UScriptStruct_FRangedValues());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Input Collision Replication"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("FluidSurfaceRain.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceRain.h"));
				MetaData->SetValue(OuterClass, TEXT("ToolTip"), TEXT("Example extension of the Fluid Surface Modifier, to simulate rain falling"));
				MetaData->SetValue(NewProp_Radius, TEXT("Category"), TEXT("FluidRain"));
				MetaData->SetValue(NewProp_Radius, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceRain.h"));
				MetaData->SetValue(NewProp_Radius, TEXT("ToolTip"), TEXT("Range of radii to use"));
				MetaData->SetValue(NewProp_Strength, TEXT("Category"), TEXT("FluidRain"));
				MetaData->SetValue(NewProp_Strength, TEXT("ModuleRelativePath"), TEXT("Public/FluidSurfaceRain.h"));
				MetaData->SetValue(NewProp_Strength, TEXT("ToolTip"), TEXT("Range of strength values to use"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFluidSurfaceRain(Z_Construct_UClass_AFluidSurfaceRain, TEXT("AFluidSurfaceRain"));
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFluidSurfaceRain);
	UPackage* Z_Construct_UPackage_FluidSurface()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/FluidSurface")), false, false));
			ReturnPackage->PackageFlags |= PKG_CompiledIn | 0x00000000;
			FGuid Guid;
			Guid.A = 0x9AC6ED0D;
			Guid.B = 0xE4C847D7;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
